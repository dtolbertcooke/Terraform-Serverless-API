name: Serverless API Terraform Pipeline
description: Builds serverless API infrastructure in the specified environment.

on:
  pull_request:
    branches:
      - main
      - test
      - prod
  push:
    branches:
      - main
      - test
      - prod
  workflow_dispatch: # Manual trigger included to allow manual runs if needed

permissions:
  id-token: write # Required for github oidc authentication with AWS
  contents: read # Allow repository contents to be checked out
  pull-requests: write # Allow PR comments with terraform plan

jobs:
  # First job: Tests & Lint (always runs)
  tests:
    name: Tests & Lint
    runs-on: ubuntu-latest

    # necessary to set environment per branch
    environment: ${{ github.ref == 'refs/heads/main' && 'dev' ||
      github.ref == 'refs/heads/test' && 'test' ||
      github.ref == 'refs/heads/prod' && 'prod' }}
    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'dev' ||
        github.ref == 'refs/heads/test' && 'test' ||
        github.ref == 'refs/heads/prod' && 'prod' }}

    steps:
      # Checkout the repo
      - name: Checkout
        uses: actions/checkout@v4

      # Lambda app testing
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18" # same version as lambda functions

      - name: Install dependencies
        working-directory: app
        run: npm ci # clean install

      - name: Run lint
        working-directory: app
        run: npm run lint # ensure code style consistency

      - name: Run unit tests
        working-directory: app/tests
        run: npm test # execute Jest unit tests for lambda functions

      # Terraform checks
      # Install Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2" # Pin to specific version

      - name: Terraform fmt check
        working-directory: infrastructure/environments/${{ env.ENVIRONMENT  }}
        run: terraform fmt -check -recursive # enforce terraform formatting standards

      - name: Terraform Init # for validation
        working-directory: infrastructure/environments/${{ env.ENVIRONMENT }}
        run: terraform init -backend=false # doesn't affect state by skipping remote state; only validates modules/providers

      - name: Terraform validate
        working-directory: infrastructure/environments/${{ env.ENVIRONMENT  }}
        run: terraform validate # validate terraform syntax

  # Second job: Terraform Plan (on PRs)
  plan:
    runs-on: ubuntu-latest
    needs: [tests] # only run if tests pass
    if: github.event_name == 'pull_request' # only run on PRs

    # necessary to set environment per branch
    environment: ${{ github.ref == 'refs/heads/main' && 'dev' ||
      github.ref == 'refs/heads/test' && 'test' ||
      github.ref == 'refs/heads/prod' && 'prod' }}
    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'dev' ||
        github.ref == 'refs/heads/test' && 'test' ||
        github.ref == 'refs/heads/prod' && 'prod' }}

    defaults:
      run:
        working-directory: infrastructure/environments/${{ env.ENVIRONMENT }} # Keep runs scoped to environment code

    steps:
      # Checkout the repo
      - name: Checkout
        uses: actions/checkout@v4

      # Configure AWS credentials using OIDC
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-oidc-role-${{ env.ENVIRONMENT }}

      # Export AWS region and TF_VAR_region for terraform resources
      - name: Export AWS region
        run: |
          echo "AWS_REGION=${{ vars.AWS_REGION }}" >> $GITHUB_ENV
          echo "TF_VAR_region=${{ vars.AWS_REGION }}" >> $GITHUB_ENV

      # Fetch backend config from SSM
      # - Retrieves global S3/DynamoDB state backend
      # - Creates backend config file for terraform init
      - name: Fetch Backend Config
        run: |
          BUCKET=$(aws ssm get-parameter --name "/tf/global-infra/backend/bucket" --query "Parameter.Value" --output text)
          TABLE=$(aws ssm get-parameter --name "/tf/global-infra/backend/table" --query "Parameter.Value" --output text)
          REGION=$(aws ssm get-parameter --name "/tf/global-infra/backend/region" --query "Parameter.Value" --output text)
          echo "TF_VAR_state_bucket_name=$BUCKET" >> $GITHUB_ENV

          cat > ${{ env.ENVIRONMENT }}.hcl <<EOF
          bucket         = "$BUCKET"
          key            = "${{ env.ENVIRONMENT }}/terraform.tfstate"
          region         = "$REGION"
          dynamodb_table = "$TABLE"
          encrypt        = true
          EOF

      # Install Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2" # Pin to specific version

      # Initialize Terraform locally on github runner
      - name: Terraform Init
        run: terraform init -backend-config=${{ env.ENVIRONMENT }}.hcl

      # Plan terraform changes and output to file
      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file="${{ env.ENVIRONMENT }}.tfvars" -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" -out=tfplan

      # Comment PR with tfplan output
      - name: Comment PR with Plan
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: tfplan

  # Third job: Terraform Apply (on pushes to main/test/prod)
  apply:
    runs-on: ubuntu-latest
    needs: [tests] # only run if tests pass
    if: github.event_name == 'push' # only run on pushes

    # necessary to set environment per branch
    environment: ${{ github.ref == 'refs/heads/main' && 'dev' ||
      github.ref == 'refs/heads/test' && 'test' ||
      github.ref == 'refs/heads/prod' && 'prod' }}
    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'dev' ||
        github.ref == 'refs/heads/test' && 'test' ||
        github.ref == 'refs/heads/prod' && 'prod' }}

    defaults:
      run:
        working-directory: infrastructure/environments/${{ env.ENVIRONMENT }} # Keep runs scoped to environment code

    steps:
      # Checkout the repo
      - name: Checkout
        uses: actions/checkout@v4

      # Bundle lambda code
      - name: Zip Lambda code
        working-directory: ./
        run: |
          make -C app/handlers/fruit-api-GET package
          make -C app/handlers/fruit-api-PUT package
          make -C app/handlers/fruit-api-PATCH package
          make -C app/handlers/fruit-api-DELETE package

      # Configure AWS credentials using OIDC
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-oidc-role-${{ env.ENVIRONMENT }}

      # Export AWS region and TF_VAR_region for terraform resources
      - name: Export AWS Region
        run: |
          echo "AWS_REGION=${{ vars.AWS_REGION }}" >> $GITHUB_ENV
          echo "TF_VAR_region=${{ vars.AWS_REGION }}" >> $GITHUB_ENV

      # Fetch backend config from SSM
      # - Retrieves global S3/DynamoDB state backend
      # - Creates backend config file for terraform init
      - name: Fetch Backend Config
        run: |
          BUCKET=$(aws ssm get-parameter --name "/tf/global-infra/backend/bucket" --query "Parameter.Value" --output text)
          TABLE=$(aws ssm get-parameter --name "/tf/global-infra/backend/table" --query "Parameter.Value" --output text)
          REGION=$(aws ssm get-parameter --name "/tf/global-infra/backend/region" --query "Parameter.Value" --output text)
          echo "TF_VAR_state_bucket_name=$BUCKET" >> $GITHUB_ENV

          cat > ${{ env.ENVIRONMENT }}.hcl <<EOF
          bucket         = "$BUCKET"
          key            = "${{ env.ENVIRONMENT }}/terraform.tfstate"
          region         = "$REGION"
          dynamodb_table = "$TABLE"
          encrypt        = true
          EOF

      # Install Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2" # Pin to specific version

      # Initialize Terraform locally on github runner
      - name: Terraform Init
        run: terraform init -backend-config=${{ env.ENVIRONMENT }}.hcl

      # Apply terraform changes to build infrastructure using tfvars for environment
      - name: Terraform Apply
        run: terraform apply -var-file="${{ env.ENVIRONMENT }}.tfvars" -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" -auto-approve
